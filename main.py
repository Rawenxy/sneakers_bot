import telebot
from telebot import types
from flask import Flask, request
import os
from pymongo import MongoClient
import config


TG_TOKEN = config.TG_TOKEN
bot = telebot.TeleBot(TG_TOKEN, parse_mode=None)
APP_URL = f'https://sneakers.herokuapp.com/{TG_TOKEN}'
server = Flask(__name__)


def get_database():
    CONNECTION_STRING = config.CONNECTION_STRING
    client = MongoClient(CONNECTION_STRING)
    return client['firebox_bot']


dbname = get_database()
collection_name = dbname["shoes"]
collection_name_w = dbname["shoes_w"]


@bot.message_handler(commands=['start'])
def man_or_woman(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    man = types.KeyboardButton('–ú—É–∂—Å–∫–∏–µ')
    woman = types.KeyboardButton('–ñ–µ–Ω—Å–∫–∏–µ')
    markup.add(man, woman)
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–¥–∫–∏–Ω–µ—Ç —Ç–µ–±–µ –ø–∞—Ä—É –∫–ª–∞—Å—Å–Ω—ã—Ö –∫—Ä–æ—Å–æ–≤–æ–∫ –ø–æ –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ!'
                     '–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help', reply_markup=markup)


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id,
                     '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –∏—Å–ø–æ–ª—å–∑—É–π "/start"'
                     '2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –æ–±–Ω–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö! –ó–∞–Ω–∏–º–∞–µ—Ç 1 –º–∏–Ω—É—Ç–∫—É :)')


brands = ['Adidas', 'Nike', 'Reebok', 'Columbia', 'New Balance']


gender = {}
price_selected = {}
brand_selected = {}
price = {
    '2000‚ÇΩ-3000‚ÇΩ': {f'$gt': 2000, f'$lt': 3000},
    '3000‚ÇΩ-4000‚ÇΩ': {f'$gt': 3000, f'$lt': 4000},
    '4000‚ÇΩ –∏ –±–æ–ª–µ–µ': {f'$gt': 4000}
}

prices_categories = list(price.keys())


@bot.message_handler(content_types=['text'])
def sneakers_find(message):
    try:
        global price_selected
        global gender
        global brand_selected
        if message.text in ['–ú—É–∂—Å–∫–∏–µ', '–ñ–µ–Ω—Å–∫–∏–µ']:
            gender[message.chat.id] = message.text

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            adidas = types.KeyboardButton('Adidas')
            nike = types.KeyboardButton('Nike')
            reebok = types.KeyboardButton('Reebok')
            columbia = types.KeyboardButton('Columbia')
            new_balance = types.KeyboardButton('New Balance')
            markup.add(adidas, nike, reebok, columbia, new_balance)
            return bot.send_message(message.chat.id,
                                    '–í—ã–±–µ—Ä–∏ –±—Ä–µ–Ω–¥ –∫—Ä–æ—Å–æ–≤–æ–∫', reply_markup=markup)

        if message.text in brands:
            brand_selected[message.chat.id] = message.text
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for key in prices_categories:
                price1 = types.KeyboardButton(key)
                markup.add(price1)
            return bot.send_message(message.chat.id,
                                    '–í—ã–±–µ—Ä–∏ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=markup)

        if message.text in prices_categories:

            price_selected[message.chat.id] = message.text

            gender_collection = collection_name if gender[message.chat.id] == '–ú—É–∂—Å–∫–∏–µ' else collection_name_w

            query = {
                'item_name': {f'$regex': f'^{brand_selected[message.chat.id]}(.*?)'},
                'new_price': price[price_selected[message.chat.id]]
            }


            for params in gender_collection.find(query):
                params_name = params['item_name']
                params_model = params['item_model']
                params_old_price = params['old_price']
                params_new_price = params['new_price']
                params_size = params['item_size']
                params_href = params['item_href']
                params_picture = params['item_picture']

                bot.send_message(
                    message.chat.id,
                    f'üî• <b>{params_name}</b>\n'
                    f'ü•æ {params_model}\n'
                    f'‚úÖ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{params_new_price}‚ÇΩ</b>\n'
                    f'‚ùå –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {params_old_price}‚ÇΩ\n'
                    f'üìê {params_size}\n'
                    f'<a href="{params_picture}"> </a>'
                    f'<a href="{params_href}">–°—Å—ã–ª–∫–∞</a>', parse_mode='HTML'
                )
    except:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è —Å –ø–æ–º–æ—à—å—é /start')


@server.route(f"/{TG_TOKEN}", methods=['POST'])
def get_message():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200


@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=APP_URL)
    return "!", 200


if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=APP_URL)
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))


